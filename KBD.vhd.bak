library ieee ;
use ieee.std_logic_1164.all ;

entity KBD is
   port (   resetN     		: in  std_logic ;
            clk        		: in  std_logic ;
			KBD_clk   		: in  std_logic ; 
			KBD_data   		: in  std_logic ;
			start   		: out  std_logic ;
			dout_new        : out std_logic;
			direction		: out integer range 0 to 3 ); -- 2:up, 1:left, 0:right, 3:down
end KBD ;

architecture k of KBD is
signal shift_reg : std_logic_vector(9 downto 0) ;
   signal parity_ok : std_logic                    ;
   type state is (idle , --initial state
				HighClk,
				LowClk,
				ChkData,
				NewData );
   constant numOfBits : integer  := 11 ; 
begin
    parity_ok <=  shift_reg(8) -- same as kbd_dat
                xor shift_reg(7) xor shift_reg(6)
                xor shift_reg(5) xor shift_reg(4)
                xor shift_reg(3) xor shift_reg(2)
                xor shift_reg(1) xor shift_reg(0) ;
				
process ( resetN , clk )

  variable present_state : state;
  variable count : integer range 0 to 15;

begin

	---- ASYNC PART ----
    if resetN = '0' then
  		start <= '0';
		count := 0 ;
        present_state := idle;
     ---- SYNCHRONOUS PART ----   
    elsif rising_edge (clk) then
  
		---- DEFAULT PART ----
	     dout_new <= '0';

		---- State Machine ----
	     case present_state is
		
			when idle =>
			
				if kbd_clk = '0' and kbd_dat = '0' then
					count := 0;
					present_state := LowClk;
				end if;
			---------------------------------
			when LowClk =>
				if kbd_clk = '1' then
					count := count + 1;
					shift_reg <= kbd_dat & shift_reg(9 downto 1);
					if count = numOfBits then
						present_state := ChkData;
					else
						present_state := HighClk;
					end if;
				end if;
			---------------------------------
			when HighClk =>
				if kbd_clk = '0' then
					present_state := LowClk;
				end if;
			---------------------------------	
			when ChkData =>
				if parity_ok = '1' then
					if shift_reg(7 downto 0) = "01110010" then
						direction <= 3;
					elsif shift_reg(7 downto 0) = "01110101" then
						direction <= 2;
					elsif shift_reg(7 downto 0) = "01101011" then
						direction <= 1;
					elsif shift_reg(7 downto 0) = "01110100" then
						direction <= 0;
					elsif shift_reg(7 downto 0) = "01011010" then
						start <= '1';
					end if;
					present_state := NewData;
				else
					present_state := idle;
				end if;
			---------------------------------
			when NewData =>
				dout_new <= '1';
				present_state := idle;
			---------------------------------
		end case;
 	end if;
end process;
end k;